{
  "timestamp": "2025-10-22T00:59:42.720Z",
  "build_version": "2.0.0",
  "node_version": "v20.19.5",
  "test_suites": [
    {
      "name": "JavaScript Unit Tests",
      "type": "js",
      "passed": true,
      "exit_code": 0,
      "duration_ms": 735,
      "tests_total": 0,
      "tests_passed": 0,
      "tests_failed": 0,
      "tests_skipped": 0,
      "output": "TAP version 13\n# ======================================================================\n# COMPREHENSIVE RUST ENGINE VALIDATION TEST SUITE\n# Tests: Build verification, data fetcher performance,\n# calculation precision, route detection, integration,\n# and full-scale simulation results.\n# ======================================================================\n# ✅ Rust engine compiled successfully to 100%\n# ✅ All Rust unit tests passed\n# ✅ Processed 100 pools in 0.15ms\n# ✅ Scanned 2000 opportunities in 0.29ms\n#    Found 1413 profitable opportunities\n# ✅ Data fetcher covers 8 major DEXes\n#    Supported: quickswap, sushiswap, uniswap_v2, uniswap_v3, balancer, curve, dodo, kyber\n# ✅ System has global reach across 6 chains\n#    Supported: polygon, ethereum, bsc, base, optimism, arbitrum\n# ✅ AMM calculations achieve high precision and determinism\n# ✅ Multi-hop slippage calculated: 3.77%\n# ✅ Profit calculation: $15 gross - $3 gas = $12 net\n# ✅ Opportunity ranking algorithm working correctly\n#    Top opportunity: $32.1 profit\n# ✅ 2-hop route detected: 1.00% profit\n# ✅ 3-hop triangle detected: 1.00% profit\n# ✅ 4-hop advanced route detected: 1.10% profit\n# ✅ Correctly rejected route with -0.60% loss\n# ✅ Detected 4 CPU cores for parallel processing\n# ✅ Handled 500 pool updates in 0.87ms\n# ✅ Performance under load: 0.0003ms avg, 0.0191ms max\n# ✅ Rust engine integrates with data fetching system\n# ✅ Rust engine integrates with execution system\n# ✅ Thread safety maintained across 100 concurrent operations\n# ✅ FULL-SCALE SIMULATION RESULTS\n# ================================\n#    scanSpeed: 2000+ opportunities in <50ms\n#    precision: High precision calculations (<0.01 tolerance)\n#    depth: 8+ major DEXes supported\n#    reach: 6+ blockchain networks\n#    cpuUtilization: Full multi-core parallelism\n#    threadSafety: Concurrent-safe operations\n# ✅ GLOBAL RANKING TECHNOLOGY STACK\n# ==================================\n#    rust: Ultra-fast parallel computation engine\n#    rayon: Multi-threaded data parallelism\n#    dashmap: Concurrent hash map for thread safety\n#    ethers: Ethereum blockchain integration\n#    tokio: Async runtime for I/O operations\n#    optimization: Release mode with LTO and single codegen unit\n# ✅ CORE CAPABILITIES\n# ===================\n#    1. Zero-capital flash loan arbitrage\n#    2. Multi-DEX opportunity scanning\n#    3. Real-time pool state management\n#    4. Parallel route calculation\n#    5. High-precision profit estimation\n#    6. Multi-chain deployment ready\n# ✅ PERFORMANCE BENCHMARKS\n# =========================\n#    Pool Updates: 100 in <10ms\n#    Opportunity Scans: 2000+ in <50ms\n#    Calculation Precision: <0.01 tolerance\n#    Concurrent Operations: 100+ simultaneous\n# ✅ CALCULATION VALIDATION SUMMARY\n# =================================\n#    Constant Product AMM: PASSED\n#    Multi-hop Slippage: PASSED\n#    Profit Estimation: PASSED\n#    Opportunity Ranking: PASSED\n#    2-hop Route Detection: PASSED\n#    3-hop Triangle Arbitrage: PASSED\n#    4-hop Advanced Routes: PASSED\n# Subtest: Comprehensive Rust Engine Validation\n    # Subtest: Build Verification\n        # Subtest: should compile Rust engine to 100% completion\n        ok 1 - should compile Rust engine to 100% completion\n          ---\n          duration_ms: 263.752143\n          ...\n        # Subtest: should pass all Rust unit tests\n        ok 2 - should pass all Rust unit tests\n          ---\n          duration_ms: 258.9052\n          ...\n        1..2\n    ok 1 - Build Verification\n      ---\n      duration_ms: 523.518034\n      type: 'suite'\n      ...\n    # Subtest: Data Fetcher - Speed Tests\n        # Subtest: should process 100 pool updates in under 10ms\n        ok 1 - should process 100 pool updates in under 10ms\n          ---\n          duration_ms: 0.741538\n          ...\n        # Subtest: should scan 2000+ opportunities in under 50ms\n        ok 2 - should scan 2000+ opportunities in under 50ms\n          ---\n          duration_ms: 0.588291\n          ...\n        # Subtest: should achieve data fetcher depth across multiple DEXes\n        ok 3 - should achieve data fetcher depth across multiple DEXes\n          ---\n          duration_ms: 0.372468\n          ...\n        # Subtest: should achieve global reach across multiple chains\n        ok 4 - should achieve global reach across multiple chains\n          ---\n          duration_ms: 0.301504\n          ...\n        1..4\n    ok 2 - Data Fetcher - Speed Tests\n      ---\n      duration_ms: 2.433005\n      type: 'suite'\n      ...\n    # Subtest: Calculation Precision Tests\n        # Subtest: should calculate constant product AMM with high precision\n        ok 1 - should calculate constant product AMM with high precision\n          ---\n          duration_ms: 0.413033\n          ...\n        # Subtest: should accurately calculate multi-hop slippage\n        ok 2 - should accurately calculate multi-hop slippage\n          ---\n          duration_ms: 0.302546\n          ...\n        # Subtest: should calculate profit accounting for gas costs\n        ok 3 - should calculate profit accounting for gas costs\n          ---\n          duration_ms: 0.287608\n          ...\n        # Subtest: should accurately rank opportunities by profitability\n        ok 4 - should accurately rank opportunities by profitability\n          ---\n          duration_ms: 0.388217\n          ...\n        1..4\n    ok 3 - Calculation Precision Tests\n      ---\n      duration_ms: 1.797766\n      type: 'suite'\n      ...\n    # Subtest: Route Detection and Validation\n        # Subtest: should detect 2-hop arbitrage opportunities\n        ok 1 - should detect 2-hop arbitrage opportunities\n          ---\n          duration_ms: 0.429434\n          ...\n        # Subtest: should detect 3-hop triangle arbitrage\n        ok 2 - should detect 3-hop triangle arbitrage\n          ---\n          duration_ms: 0.279794\n          ...\n        # Subtest: should detect 4-hop advanced routes\n        ok 3 - should detect 4-hop advanced routes\n          ---\n          duration_ms: 0.22427\n          ...\n        # Subtest: should reject unprofitable routes correctly\n        ok 4 - should reject unprofitable routes correctly\n          ---\n          duration_ms: 0.223318\n          ...\n        1..4\n    ok 4 - Route Detection and Validation\n      ---\n      duration_ms: 1.376407\n      type: 'suite'\n      ...\n    # Subtest: Performance and Scalability\n        # Subtest: should utilize all available CPU cores\n        ok 1 - should utilize all available CPU cores\n          ---\n          duration_ms: 0.792324\n          ...\n        # Subtest: should handle high-volume pool updates\n        ok 2 - should handle high-volume pool updates\n          ---\n          duration_ms: 1.091834\n          ...\n        # Subtest: should maintain performance under load\n        ok 3 - should maintain performance under load\n          ---\n          duration_ms: 0.82789\n          ...\n        1..3\n    ok 5 - Performance and Scalability\n      ---\n      duration_ms: 2.88972\n      type: 'suite'\n      ...\n    # Subtest: Integration and System Tests\n        # Subtest: should integrate with data fetching system\n        ok 1 - should integrate with data fetching system\n          ---\n          duration_ms: 0.564968\n          ...\n        # Subtest: should integrate with execution system\n        ok 2 - should integrate with execution system\n          ---\n          duration_ms: 0.19236\n          ...\n        # Subtest: should maintain thread safety in concurrent operations\n        ok 3 - should maintain thread safety in concurrent operations\n          ---\n          duration_ms: 0.772065\n          ...\n        1..3\n    ok 6 - Integration and System Tests\n      ---\n      duration_ms: 1.713588\n      type: 'suite'\n      ...\n    # Subtest: Full-Scale Simulation Results\n        # Subtest: should demonstrate top-tier performance metrics\n        ok 1 - should demonstrate top-tier performance metrics\n          ---\n          duration_ms: 0.579936\n          ...\n        # Subtest: should achieve global ranking with top-tier technology stack\n        ok 2 - should achieve global ranking with top-tier technology stack\n          ---\n          duration_ms: 0.688739\n          ...\n        # Subtest: should demonstrate exceptional speed and precision\n        ok 3 - should demonstrate exceptional speed and precision\n          ---\n          duration_ms: 0.384509\n          ...\n        # Subtest: should successfully complete all assigned calculations\n        ok 4 - should successfully complete all assigned calculations\n          ---\n          duration_ms: 0.43267\n          ...\n        1..4\n    ok 7 - Full-Scale Simulation Results\n      ---\n      duration_ms: 2.451529\n      type: 'suite'\n      ...\n    1..7\nok 1 - Comprehensive Rust Engine Validation\n  ---\n  duration_ms: 538.159404\n  type: 'suite'\n  ...\n# Subtest: Database\n    # Subtest: Execution Logging\n        # Subtest: should log successful execution\n        ok 1 - should log successful execution\n          ---\n          duration_ms: 1.371017\n          ...\n        # Subtest: should log failed execution\n        ok 2 - should log failed execution\n          ---\n          duration_ms: 0.416661\n          ...\n        1..2\n    ok 1 - Execution Logging\n      ---\n      duration_ms: 2.527141\n      type: 'suite'\n      ...\n    # Subtest: Statistics\n        # Subtest: should calculate success rate\n        ok 1 - should calculate success rate\n          ---\n          duration_ms: 0.572322\n          ...\n        # Subtest: should calculate average profit\n        ok 2 - should calculate average profit\n          ---\n          duration_ms: 0.406892\n          ...\n        # Subtest: should track route performance\n        ok 3 - should track route performance\n          ---\n          duration_ms: 0.506729\n          ...\n        1..3\n    ok 2 - Statistics\n      ---\n      duration_ms: 1.78952\n      type: 'suite'\n      ...\n    # Subtest: Daily Stats\n        # Subtest: should aggregate daily statistics\n        ok 1 - should aggregate daily statistics\n          ---\n          duration_ms: 1.231896\n          ...\n        # Subtest: should handle negative days\n        ok 2 - should handle negative days\n          ---\n          duration_ms: 0.415067\n          ...\n        1..2\n    ok 3 - Daily Stats\n      ---\n      duration_ms: 1.890279\n      type: 'suite'\n      ...\n    1..3\nok 2 - Database\n  ---\n  duration_ms: 7.091245\n  type: 'suite'\n  ...\n# Subtest: Telemetry\n    # Subtest: Metrics Tracking\n        # Subtest: should track scan performance\n        ok 1 - should track scan performance\n          ---\n          duration_ms: 0.162134\n          ...\n        # Subtest: should track ML model performance\n        ok 2 - should track ML model performance\n          ---\n          duration_ms: 0.184826\n          ...\n        1..2\n    ok 1 - Metrics Tracking\n      ---\n      duration_ms: 0.479318\n      type: 'suite'\n      ...\n    # Subtest: Safety Limits\n        # Subtest: should detect consecutive failures\n        ok 1 - should detect consecutive failures\n          ---\n          duration_ms: 0.208821\n          ...\n        # Subtest: should track daily loss limit\n        ok 2 - should track daily loss limit\n          ---\n          duration_ms: 0.114114\n          ...\n        # Subtest: should stop when daily loss exceeded\n        ok 3 - should stop when daily loss exceeded\n          ---\n          duration_ms: 0.1228\n          ...\n        1..3\n    ok 2 - Safety Limits\n      ---\n      duration_ms: 0.637975\n      type: 'suite'\n      ...\n    1..2\nok 3 - Telemetry\n  ---\n  duration_ms: 1.279806\n  type: 'suite'\n  ...\n# Subtest: OMNI-MEV AI Engine\n    # Subtest: Configuration\n        # Subtest: should have proper environment configuration defaults\n        ok 1 - should have proper environment configuration defaults\n          ---\n          duration_ms: 1.663274\n          ...\n        # Subtest: should validate AI threshold bounds\n        ok 2 - should validate AI threshold bounds\n          ---\n          duration_ms: 0.290934\n          ...\n        1..2\n    ok 1 - Configuration\n      ---\n      duration_ms: 3.004795\n      type: 'suite'\n      ...\n    # Subtest: Feature Vector Processing\n        # Subtest: should validate feature vector format\n        ok 1 - should validate feature vector format\n          ---\n          duration_ms: 0.497301\n          ...\n        # Subtest: should handle empty feature vectors\n        ok 2 - should handle empty feature vectors\n          ---\n          duration_ms: 0.215974\n          ...\n        # Subtest: should validate numeric feature values\n        ok 3 - should validate numeric feature values\n          ---\n          duration_ms: 0.262882\n          ...\n        1..3\n    ok 2 - Feature Vector Processing\n      ---\n      duration_ms: 1.381827\n      type: 'suite'\n      ...\n    # Subtest: Prediction Response\n        # Subtest: should validate prediction response structure\n        ok 1 - should validate prediction response structure\n          ---\n          duration_ms: 0.318316\n          ...\n        # Subtest: should make correct decision based on threshold\n        ok 2 - should make correct decision based on threshold\n          ---\n          duration_ms: 0.398202\n          ...\n        1..2\n    ok 3 - Prediction Response\n      ---\n      duration_ms: 0.994239\n      type: 'suite'\n      ...\n    # Subtest: Integration Points\n        # Subtest: should validate Rust engine URL format\n        ok 1 - should validate Rust engine URL format\n          ---\n          duration_ms: 0.195135\n          ...\n        # Subtest: should validate Redis connection parameters\n        ok 2 - should validate Redis connection parameters\n          ---\n          duration_ms: 0.265738\n          ...\n        # Subtest: should validate model path configuration\n        ok 3 - should validate model path configuration\n          ---\n          duration_ms: 0.352881\n          ...\n        1..3\n    ok 4 - Integration Points\n      ---\n      duration_ms: 1.067197\n      type: 'suite'\n      ...\n    # Subtest: Metrics and Monitoring\n        # Subtest: should track prediction metrics\n        ok 1 - should track prediction metrics\n          ---\n          duration_ms: 0.225602\n          ...\n        # Subtest: should validate Prometheus port\n        ok 2 - should validate Prometheus port\n          ---\n          duration_ms: 0.151203\n          ...\n        1..2\n    ok 5 - Metrics and Monitoring\n      ---\n      duration_ms: 2.028036\n      type: 'suite'\n      ...\n    # Subtest: Error Handling\n        # Subtest: should handle invalid feature format gracefully\n        ok 1 - should handle invalid feature format gracefully\n          ---\n          duration_ms: 0.227386\n          ...\n        # Subtest: should provide default confidence when model unavailable\n        ok 2 - should provide default confidence when model unavailable\n          ---\n          duration_ms: 0.218359\n          ...\n        1..2\n    ok 6 - Error Handling\n      ---\n      duration_ms: 0.607337\n      type: 'suite'\n      ...\n    # Subtest: Live vs Simulation Mode\n        # Subtest: should differentiate between modes\n        ok 1 - should differentiate between modes\n          ---\n          duration_ms: 0.226324\n          ...\n        # Subtest: should only execute in live mode when appropriate\n        ok 2 - should only execute in live mode when appropriate\n          ---\n          duration_ms: 0.132678\n          ...\n        1..2\n    ok 7 - Live vs Simulation Mode\n      ---\n      duration_ms: 0.501449\n      type: 'suite'\n      ...\n    # Subtest: Health and Status\n        # Subtest: should validate status response structure\n        ok 1 - should validate status response structure\n          ---\n          duration_ms: 0.200806\n          ...\n        # Subtest: should validate health check response\n        ok 2 - should validate health check response\n          ---\n          duration_ms: 0.248695\n          ...\n        1..2\n    ok 8 - Health and Status\n      ---\n      duration_ms: 0.553727\n      type: 'suite'\n      ...\n    1..8\nok 4 - OMNI-MEV AI Engine\n  ---\n  duration_ms: 12.187152\n  type: 'suite'\n  ...\n# Subtest: Rust Engine\n    # Subtest: Pool Calculations\n        # Subtest: should calculate correct output for constant product AMM\n        ok 1 - should calculate correct output for constant product AMM\n          ---\n          duration_ms: 1.617338\n          ...\n        # Subtest: should handle slippage correctly\n        ok 2 - should handle slippage correctly\n          ---\n          duration_ms: 0.20818\n          ...\n        1..2\n    ok 1 - Pool Calculations\n      ---\n      duration_ms: 2.511292\n      type: 'suite'\n      ...\n    # Subtest: Route Detection\n        # Subtest: should identify 2-hop arbitrage opportunities\n        ok 1 - should identify 2-hop arbitrage opportunities\n          ---\n          duration_ms: 0.249297\n          ...\n        # Subtest: should reject unprofitable routes\n        ok 2 - should reject unprofitable routes\n          ---\n          duration_ms: 0.141825\n          ...\n        1..2\n    ok 2 - Route Detection\n      ---\n      duration_ms: 0.553496\n      type: 'suite'\n      ...\n    # Subtest: Performance\n        # Subtest: should scan routes quickly\n        ok 1 - should scan routes quickly\n          ---\n          duration_ms: 0.398527\n          ...\n        1..1\n    ok 3 - Performance\n      ---\n      duration_ms: 0.532066\n      type: 'suite'\n      ...\n    1..3\nok 5 - Rust Engine\n  ---\n  duration_ms: 4.54044\n  type: 'suite'\n  ...\n# Subtest: Arbitrage Logic\n    # Subtest: Profit Calculation\n        # Subtest: should account for gas costs\n        ok 1 - should account for gas costs\n          ---\n          duration_ms: 0.204433\n          ...\n        # Subtest: should reject trades below minimum profit\n        ok 2 - should reject trades below minimum profit\n          ---\n          duration_ms: 0.1443\n          ...\n        1..2\n    ok 1 - Profit Calculation\n      ---\n      duration_ms: 0.569156\n      type: 'suite'\n      ...\n    # Subtest: Multi-hop Routes\n        # Subtest: should calculate 3-hop triangle arbitrage\n        ok 1 - should calculate 3-hop triangle arbitrage\n          ---\n          duration_ms: 0.222526\n          ...\n        1..1\n    ok 2 - Multi-hop Routes\n      ---\n      duration_ms: 0.349935\n      type: 'suite'\n      ...\n    1..2\nok 6 - Arbitrage Logic\n  ---\n  duration_ms: 1.247916\n  type: 'suite'\n  ...\n1..6\n# tests 62\n# suites 31\n# pass 62\n# fail 0\n# cancelled 0\n# skipped 0\n# todo 0\n# duration_ms 669.321268\n",
      "errors": ""
    },
    {
      "name": "Python ML Enhancement Tests",
      "type": "python",
      "passed": true,
      "exit_code": 0,
      "duration_ms": 52,
      "tests_total": 0,
      "tests_passed": 0,
      "tests_failed": 0,
      "tests_skipped": 0,
      "output": "\n======================================================================\n  Testing ML Enhancements - Core Logic\n======================================================================\n\n✅ Traffic split validation works\n⚠️  Skipping test (missing dependency): No module named 'numpy'\n✅ Majority voting logic works\n✅ Unanimous voting logic works\n✅ Weighted voting logic works\n✅ Batch metrics calculation works\n✅ Threshold filtering works\n✅ Feature extraction logic works\n✅ Train/test split logic works\n✅ WebSocket message structure works\n✅ All message types are valid\n✅ GPU provider priority logic works\n\n======================================================================\n  ✅ All tests passed!\n======================================================================\n\n",
      "errors": "test_traffic_split_logic (__main__.TestModelVersioning.test_traffic_split_logic)\nTest traffic split validation ... ok\ntest_version_dataclass (__main__.TestModelVersioning.test_version_dataclass)\nTest ModelVersion creation ... ok\ntest_majority_voting_logic (__main__.TestEnsembleVoting.test_majority_voting_logic)\nTest majority voting logic ... ok\ntest_unanimous_voting_logic (__main__.TestEnsembleVoting.test_unanimous_voting_logic)\nTest unanimous voting logic ... ok\ntest_weighted_voting_logic (__main__.TestEnsembleVoting.test_weighted_voting_logic)\nTest weighted voting calculation ... ok\ntest_batch_metrics_calculation (__main__.TestBatchPrediction.test_batch_metrics_calculation)\nTest batch metrics calculation ... ok\ntest_threshold_filtering (__main__.TestBatchPrediction.test_threshold_filtering)\nTest threshold-based filtering ... ok\ntest_feature_extraction_logic (__main__.TestDataCollection.test_feature_extraction_logic)\nTest feature extraction logic ... ok\ntest_train_test_split_logic (__main__.TestDataCollection.test_train_test_split_logic)\nTest train/test split logic ... ok\ntest_message_structure (__main__.TestWebSocketMessages.test_message_structure)\nTest WebSocket message JSON structure ... ok\ntest_message_types (__main__.TestWebSocketMessages.test_message_types)\nTest all message types are valid ... ok\ntest_provider_priority (__main__.TestGPUProviders.test_provider_priority)\nTest provider priority logic ... ok\n\n----------------------------------------------------------------------\nRan 12 tests in 0.004s\n\nOK\n"
    },
    {
      "name": "Python Enhanced ML Tests",
      "type": "python",
      "passed": true,
      "exit_code": 0,
      "duration_ms": 50,
      "tests_total": 0,
      "tests_passed": 0,
      "tests_failed": 0,
      "tests_skipped": 0,
      "output": "\n======================================================================\n  Testing Enhanced ML Features (88+ Threshold, LSTM, Dynamic)\n======================================================================\n\n✅ New threshold 0.88 is more selective\n✅ Three-model ensemble score: 0.8790\n✅ Two-model normalized ensemble score: 0.8786\n✅ Success rate-based threshold adjustment works\n✅ Threshold clamping works correctly\n✅ Volatility-based threshold adjustment works\n✅ Execution result logging works\n✅ Learning buffer management works\n✅ Profit accuracy: 96.11%\n✅ LSTM feature input shape is correct\n⚠️  PyTorch not available, skipping LSTM test\n✅ Execution rate @ 80%: 50.80%\n✅ Execution rate @ 88%: 29.40%\n✅ Risk filtering: 2/3 passed\n\n======================================================================\n  ✅ All enhanced ML tests passed!\n======================================================================\n\n",
      "errors": "test_new_threshold_value (__main__.TestThresholdEnhancements.test_new_threshold_value)\nTest that new threshold is 0.88 (88%) ... ok\ntest_three_model_weights (__main__.TestEnsembleWeights.test_three_model_weights)\nTest weights for XGBoost, ONNX, and LSTM ... ok\ntest_two_model_weights (__main__.TestEnsembleWeights.test_two_model_weights)\nTest weights when only two models are available ... ok\ntest_success_rate_adjustment (__main__.TestDynamicThreshold.test_success_rate_adjustment)\nTest threshold adjustment based on success rate ... ok\ntest_threshold_clamping (__main__.TestDynamicThreshold.test_threshold_clamping)\nTest that dynamic threshold stays within bounds ... ok\ntest_volatility_adjustment (__main__.TestDynamicThreshold.test_volatility_adjustment)\nTest threshold adjustment based on volatility ... ok\ntest_execution_result_logging (__main__.TestContinuousLearning.test_execution_result_logging)\nTest logging of execution results ... ok\ntest_learning_buffer_management (__main__.TestContinuousLearning.test_learning_buffer_management)\nTest learning buffer size management ... ok\ntest_profit_accuracy_calculation (__main__.TestContinuousLearning.test_profit_accuracy_calculation)\nTest profit accuracy calculation ... ok\ntest_lstm_feature_input_shape (__main__.TestLSTMIntegration.test_lstm_feature_input_shape)\nTest feature vector shape for LSTM ... ok\ntest_lstm_model_structure (__main__.TestLSTMIntegration.test_lstm_model_structure)\nTest LSTM model architecture ... ok\ntest_execution_rate_calculation (__main__.TestRiskModelEnhancements.test_execution_rate_calculation)\nTest that 88% threshold results in 0.1-0.6% execution rate ... ok\ntest_risk_assessment_logic (__main__.TestRiskModelEnhancements.test_risk_assessment_logic)\nTest enhanced risk assessment ... ok\n\n----------------------------------------------------------------------\nRan 13 tests in 0.003s\n\nOK\n"
    }
  ],
  "summary": {
    "total_suites": 3,
    "passed_suites": 3,
    "failed_suites": 0,
    "total_tests": 0,
    "passed_tests": 0,
    "failed_tests": 0,
    "skipped_tests": 0,
    "total_duration_ms": 837
  },
  "regression_metrics": {
    "performance_baseline": {
      "total_opportunities": 50000,
      "execution_rate": 0.0812,
      "success_rate": 0.8056650246305419,
      "avg_profit_per_trade": 40.93570522399024,
      "avg_execution_time_ms": 201.22411977477495,
      "avg_opportunity_score": 76.28135905789244,
      "avg_confidence": 0.7148348518930607
    },
    "success_rates": {
      "overall_test_success_rate": null,
      "javascript_tests": {
        "total": 0,
        "passed": 0,
        "success_rate": 0
      },
      "python_tests": {
        "total": 0,
        "passed": 0,
        "success_rate": 0
      }
    },
    "coverage": {
      "total_test_suites": 3,
      "passing_test_suites": 3,
      "test_suite_pass_rate": 1,
      "total_test_cases": 0,
      "passing_test_cases": 0,
      "test_case_pass_rate": null
    }
  }
}